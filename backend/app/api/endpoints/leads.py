from fastapi import APIRouter, HTTPException, Depends, Request
from sqlalchemy.orm import Session
from typing import List
import datetime

from app.api.schemas import LeadCreate, LeadResponse, MessageResponse
from app.core.config import settings
from app.db.base import get_db
from app.db.models import Lead

router = APIRouter()


@router.post("/", response_model=LeadResponse)
async def create_lead(
    lead_data: LeadCreate,
    request: Request,
    db: Session = Depends(get_db)
):
    """
    Crear un nuevo lead desde el formulario de contacto
    """
    try:
        # Obtener informaci√≥n adicional de la request
        client_ip = request.client.host
        user_agent = request.headers.get("user-agent", "")
        
        # Crear nuevo lead
        new_lead = Lead(
            nombre=lead_data.nombre,
            email=lead_data.email,
            mensaje=lead_data.mensaje,
            telefono=lead_data.telefono,
            empresa=lead_data.empresa,
            sector=lead_data.sector,
            ip_address=client_ip,
            user_agent=user_agent[:500] if user_agent else None  # Limitar tama√±o
        )
        
        db.add(new_lead)
        db.commit()
        db.refresh(new_lead)
        
        # TODO: Enviar notificaci√≥n por email a nicolas@dozo.tech
        # await send_lead_notification(new_lead)
        
        return LeadResponse(
            mensaje="¬°Gracias por tu inter√©s en Dozo.Tech! Te contactar√© pronto para explorar c√≥mo puedo ayudarte a optimizar tu negocio con IA.",
            lead_id=new_lead.id,
            fecha_creacion=new_lead.fecha_creacion
        )
        
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"Error al procesar tu solicitud: {str(e)}"
        )


@router.get("/demo-leads")
async def get_demo_leads():
    """
    Endpoint demo para mostrar ejemplos de leads t√≠picos
    """
    demo_leads = [
        {
            "nombre": "Mar√≠a Gonz√°lez",
            "empresa": "Restaurante La Cocina",
            "sector": "Gastronom√≠a",
            "mensaje": "Necesito automatizar el inventario y pedidos",
            "fecha": "2024-01-15"
        },
        {
            "nombre": "Carlos Ruiz",
            "empresa": "Boutique Fashion",
            "sector": "Retail",
            "mensaje": "Quiero implementar an√°lisis predictivo de ventas",
            "fecha": "2024-01-18"
        },
        {
            "nombre": "Ana Silva",
            "empresa": "Cl√≠nica Dental Sonrisa",
            "sector": "Salud",
            "mensaje": "Automatizar agendamiento y seguimiento de pacientes",
            "fecha": "2024-01-20"
        },
        {
            "nombre": "Jorge Mendoza",
            "empresa": "Transportes Express",
            "sector": "Log√≠stica",
            "mensaje": "Optimizar rutas y gesti√≥n de flota con IA",
            "fecha": "2024-01-22"
        }
    ]
    
    return {
        "mensaje": "Ejemplos de leads t√≠picos que recibe Dozo.Tech",
        "total_leads": len(demo_leads),
        "leads": demo_leads,
        "nota": "Estos son ejemplos del tipo de negocios que buscan automatizaci√≥n con IA"
    }


@router.get("/stats")
async def get_lead_stats(db: Session = Depends(get_db)):
    """
    Estad√≠sticas b√°sicas de leads (para dashboard administrativo)
    """
    try:
        total_leads = db.query(Lead).count()
        leads_today = db.query(Lead).filter(
            Lead.fecha_creacion >= datetime.date.today()
        ).count()
        
        # Distribuci√≥n por sector
        sectores = db.query(Lead.sector).filter(Lead.sector.isnot(None)).all()
        sector_count = {}
        for (sector,) in sectores:
            sector_count[sector] = sector_count.get(sector, 0) + 1
        
        return {
            "total_leads": total_leads,
            "leads_hoy": leads_today,
            "distribucion_sectores": sector_count,
            "mensaje": "Estad√≠sticas de Dozo.Tech - Generando inter√©s en automatizaci√≥n con IA"
        }
        
    except Exception as e:
        return {
            "error": "Error al obtener estad√≠sticas",
            "detalle": str(e),
            "demo_stats": {
                "total_leads": 47,
                "leads_hoy": 3,
                "distribucion_sectores": {
                    "Gastronom√≠a": 18,
                    "Retail": 12,
                    "Salud": 8,
                    "Log√≠stica": 5,
                    "Servicios": 4
                }
            }
        }


@router.post("/contact-demo")
async def contact_demo():
    """
    Simulaci√≥n de env√≠o de formulario de contacto para demos
    """
    import random
    
    sectores = ["Gastronom√≠a", "Retail", "Salud", "Log√≠stica", "Servicios", "Manufactura"]
    nombres = ["Ana Garc√≠a", "Luis P√©rez", "Mar√≠a Rodr√≠guez", "Carlos L√≥pez", "Sofia Mart√≠nez"]
    
    demo_lead = {
        "nombre": random.choice(nombres),
        "email": f"demo{random.randint(100,999)}@empresa.com",
        "empresa": f"Empresa Demo {random.randint(1,50)}",
        "sector": random.choice(sectores),
        "mensaje": "Estoy interesado en automatizar mis procesos con IA",
        "estado": "Procesado correctamente"
    }
    
    return {
        "mensaje": "‚úÖ Lead demo creado exitosamente",
        "lead": demo_lead,
        "siguiente_paso": "Nicol√°s se contactar√° en las pr√≥ximas 24 horas",
        "nota": "En producci√≥n, esto se guardar√≠a en la base de datos y enviar√≠a una notificaci√≥n"
    }


async def send_lead_notification(lead: Lead):
    """
    Funci√≥n placeholder para enviar notificaci√≥n de nuevo lead
    En producci√≥n, aqu√≠ se implementar√≠a el env√≠o de email
    """
    # TODO: Implementar con SMTP o servicio de email
    print(f"üìß Nuevo lead: {lead.nombre} ({lead.email}) - {lead.empresa}")
    pass 